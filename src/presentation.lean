import basic

/- Some definitions for specifying normal subgroups generated by group elements and by defining a group by generators and relations -/

open quotient_group set
open category_theory (mk_ob)

variables {α : Type*} [group α]

/-- the subgroup generated by a set is a normal subgroup if the set is closed under conjugates -/
lemma closure.normal_subgroup {s : set α} (hs : ∀ n ∈ s, ∀ g : α, g * n * g⁻¹ ∈ s) : 
  normal_subgroup (group.closure s) := 
begin
  fapply normal_subgroup.mk, intros n H g, induction H,
  { constructor, apply hs _ H_a_1 },
  { simp, apply group.in_closure.one },
  { have := group.in_closure.inv (H_ih), simp only [mul_inv_rev, inv_inv] at this, 
    rwa [mul_assoc] },
  { have := group.in_closure.mul (H_ih_a) (H_ih_a_1), 
    rwa [mul_assoc, ←mul_assoc g⁻¹, inv_mul_cancel_left, ←mul_assoc, mul_assoc g] at this },
end

/-- The smallest set containing s closed under conjugations -/
inductive conjugates (s : set α) : set α
| base : Π{{x}}, x ∈ s → conjugates x
| normal : Π{{x}} y, conjugates x → conjugates (y * x * y⁻¹)

/-- Given a set s of group elements, return the normal subgroup of α generated by s. 
  This is called the conjugate closure, normal closure or the normal subgroup generated by s. -/
def normal_closure (s : set α) : set α :=
group.closure (conjugates s)

instance (s : set α) : normal_subgroup (normal_closure s) := 
closure.normal_subgroup $ λ x hx y, conjugates.normal y hx

def group_modulo_relations (α : Type*) [group α] (s : set α) : Group :=
mk_ob $ quotient_group.quotient (normal_closure s)
 
notation α `/⟪`:95 R `⟫`:90 := group_modulo_relations α R

def group_of_generators_relations (gen : Type*) (relations : set (free_group gen)) : Group := 
(free_group gen)/⟪relations⟫

notation `⟪`:95 G `|`:90 R`⟫`:0 := group_of_generators_relations G R

def generated_of {G : Type*} {R : set (free_group G)} : G → ⟪G | R⟫ :=
  λ g, by {apply mk, exact free_group.of g}

local notation `⟪`:50 a `⟫`:50 := free_group.of a

/- The dihedral groups -/

/- The dihedral groups are an easy case of the Coxeter groups -/
namespace dihedral_group
def r := ⟪ff⟫
def s := ⟪tt⟫
end dihedral_group
open dihedral_group

/-- The dihedral group of order 2n -/
def dihedral_group (n : ℕ) : Group := ⟪bool | {r^n, s^2, s * r * s * r}⟫

/- Coxeter groups -/

/-- The Coxeter group -/
-- We could require that m i i = 1 for all i : α
def coxeter_group {α : Type*} (m : α → α → enat) : Group := 
⟪α | (λ(x : α × α), (⟪x.1⟫ * ⟪x.2⟫)^m x.1 x.2) '' univ⟫

def matrix_of_graph {α : Type*} [decidable_eq α] (E : α → α → Prop) [decidable_rel E] (x y : α) :
  enat :=
if x = y then 1 else if E x y then 3 else 2
