import basic

/- Some definitions for specifying normal subgroups generated by group elements and by defining a group by generators and relations -/

open quotient_group set

variables {α : Type*} [group α]

/-- Given a set xs of group elements, return the normal subgroup of α generated by xs -/
inductive normal_subgroup_mk (xs : set α) : set α
| base : Π{{x}}, x ∈ xs → normal_subgroup_mk x
| mul  : Π{{x y}}, normal_subgroup_mk x → normal_subgroup_mk y → normal_subgroup_mk (x * y)
| inv  : Π{{x}}, normal_subgroup_mk x → normal_subgroup_mk (x⁻¹)
| one  : normal_subgroup_mk 1
| normal : Π{{x}} y, normal_subgroup_mk x → normal_subgroup_mk (y⁻¹ * x * y)

instance normal_subgroup_mk_normal {α : Type*} [group α] (xs : set α) : 
  normal_subgroup (normal_subgroup_mk xs) := 
omitted

def group_modulo_relations (α : Type*) [group α] (xs : set α) : Group :=
  ⟨quotient_group.quotient (normal_subgroup_mk xs), by apply_instance⟩
 
notation α `/⟪`:95 R `⟫`:90 := group_modulo_relations α R

def group_of_generators_relations (gen : Type*) (relations : set (free_group gen)) : Group := 
(free_group gen)/⟪relations⟫

notation `⟪`:95 G `|`:90 R`⟫`:0 := group_of_generators_relations G R

def generated_of {G : Type*} {R : set (free_group G)} : G → ⟪G | R⟫ :=
  λ g, by {apply mk, exact free_group.of g}

local notation `⟪`:50 a `⟫`:50 := free_group.of a

/- The dihedral groups -/

/- The dihedral groups are an easy case of the Coxeter groups -/
namespace dihedral_group
def r := ⟪ff⟫
def s := ⟪tt⟫
end dihedral_group
open dihedral_group

/-- The dihedral group of order 2n -/
def dihedral_group (n : ℕ) : Group := ⟪bool | {r^n, s^2, s * r * s * r}⟫

/- Coxeter groups -/

/-- The Coxeter group -/
-- We could require that m i i = 1 for all i : α
def coxeter_group {α : Type*} (m : α → α → enat) : Group := 
⟪α | (λ(x : α × α), (⟪x.1⟫ * ⟪x.2⟫)^m x.1 x.2) '' univ⟫

def matrix_of_graph {α : Type*} [decidable_eq α] (E : α → α → Prop) [decidable_rel E] (x y : α) :
  enat :=
if x = y then 1 else if E x y then 3 else 2
