-- Copyright (c) 2018 Scott Morrison. All rights reserved.
-- Released under Apache 2.0 license as described in the file LICENSE.
-- Authors: Scott Morrison

import category_theory.limits.shapes.products basic data.dvector

local notation h :: t  := dvector.cons h t
local notation `[` l:(foldr `, ` (h t, dvector.cons h t) dvector.nil `]`) := l

universes u v

open category_theory

namespace category_theory.limits

@[derive decidable_eq] inductive two : Type v
| left | right

def two.map {C : Type u} (X Y : C) : two ‚Üí C
| two.left := X
| two.right := Y

variables {C : Type u} [ùíû : category.{v u} C]
include ùíû 

variables {X Y : C}

def binary_fan {P : C} (œÄ‚ÇÅ : P ‚ü∂ X) (œÄ‚ÇÇ : P ‚ü∂ Y) : fan (two.map X Y) :=
{ X := P,
  œÄ := ‚ü®Œª j, two.cases_on j œÄ‚ÇÅ œÄ‚ÇÇ, Œª x y f, by tidy‚ü©}
def binary_cofan {P : C} (Œπ‚ÇÅ : X ‚ü∂ P) (Œπ‚ÇÇ : Y ‚ü∂ P) : cofan (two.map X Y) :=
{ X := P,
  Œπ := { app := Œª j, two.cases_on j Œπ‚ÇÅ Œπ‚ÇÇ }}

def fan.œÄ‚ÇÅ {f : two ‚Üí C} (t : fan f) : t.X ‚ü∂ f two.left := t.œÄ.app two.left
def fan.œÄ‚ÇÇ {f : two ‚Üí C} (t : fan f) : t.X ‚ü∂ f two.right := t.œÄ.app two.right

def cofan.Œπ‚ÇÅ {f : two ‚Üí C} (t : cofan f) : f two.left ‚ü∂ t.X := t.Œπ.app two.left
def cofan.Œπ‚ÇÇ {f : two ‚Üí C} (t : cofan f) : f two.right ‚ü∂ t.X := t.Œπ.app two.right

-- #check limit

-- #print has_limit

/- functor.of_function (two.map X Y) is the binary product diagram -/

/-- The binary product is the vertex of the limiting cone to the canonical functor two ‚Üí ùíû
    associated to X and Y -/
def binary_product (X Y : C) [has_limit (functor.of_function $ two.map X Y)] : C :=
  limit (functor.of_function $ two.map X Y)

namespace binary_product
def œÄ‚ÇÅ {X Y : C} [has_limit (functor.of_function $ two.map X Y)] : binary_product X Y ‚ü∂ X := limit.œÄ _ two.left

def œÄ‚ÇÇ {X Y : C} [has_limit (functor.of_function $ two.map X Y)] : binary_product X Y ‚ü∂ Y := limit.œÄ _ two.right

local infix ` √ó `:60 := binary_product

end binary_product

def dfin.map {n : ‚Ñï} (v : dvector C n) : dfin n ‚Üí C :=
 Œª d, by {induction v, cases d, from v_x}

-- variable [has_limit (@functor.of_function C _ _ $ dfin.map Xs)]


def finitary_product {n : ‚Ñï} {Xs : dvector C n} [has_limit (functor.of_function $ dfin.map Xs)] : C :=
  limit (@functor.of_function C _ _ (dfin.map Xs))

/- Testing this definition -/
-- omit ùíû 
-- def dfin.map' {n : ‚Ñï} {Œ± : Type*} : dvector Œ± n ‚Üí dfin n ‚Üí Œ± :=
--   Œª v d, by {induction v, cases d, cases d, exact v_x, exact v_ih d_a}

-- def my_example := dfin.map' ([1,2,3] : dvector ‚Ñï 3)

-- #eval my_example 0
-- #eval my_example 1
-- #eval my_example 2




namespace finitary_product

end finitary_product

end category_theory.limits
