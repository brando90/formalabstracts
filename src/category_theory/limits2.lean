import ..basic category_theory.limits.limits


universes u u‚ÇÅ u‚ÇÇ v v‚ÇÅ v‚ÇÇ

namespace category_theory
  open function
  variables {C : Type u‚ÇÅ} [ùíû : category.{v‚ÇÅ} C]
  include ùíû

  lemma injective_hom_op (X Y : C) : injective (@has_hom.hom.op _ _ X Y) :=
  Œª f f' hf, by rw [‚Üê@has_hom.hom.unop_op _ _ _ _ f, ‚Üê@has_hom.hom.unop_op _ _ _ _ f', hf]

  lemma injective_hom_unop (X Y : C·µí·µñ) : injective (@has_hom.hom.unop _ _ X Y) :=
  Œª f f' hf, by rw [‚Üê@has_hom.hom.op_unop _ _ _ _ f, ‚Üê@has_hom.hom.op_unop _ _ _ _ f', hf]

end category_theory

open category_theory

namespace category_theory.nat_trans

variables {C : Type u‚ÇÅ} [ùíû : category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [ùíü : category.{v‚ÇÇ} D]
include ùíû ùíü

protected def op {F F' : C ‚•§ D} (Œ∑ : F ‚üπ F') : F'.op ‚üπ F.op :=
{ app := Œª x, (Œ∑.app $ unop x).op,
  naturality' := by { intros, simp, rw [‚Üêop_comp, ‚Üêop_comp, Œ∑.naturality] } }

protected def unop {F F' : C·µí·µñ ‚•§ D·µí·µñ} (Œ∑ : F ‚üπ F') : F'.unop ‚üπ F.unop :=
{ app := Œª x, (Œ∑.app $ op x).unop,
  naturality' := by { intros, simp, rw [‚Üêunop_comp, ‚Üêunop_comp, Œ∑.naturality] } }

protected def unop' (F F' : C ‚•§ D) (Œ∑ : F.op ‚üπ F'.op) : F' ‚üπ F :=
{ app := Œª x, (Œ∑.app $ op x).unop,
  naturality' :=
    by { intros, apply injective_hom_op, have := Œ∑.naturality f.op, simp at this, simp [this] } }

protected def op' (F F' : C·µí·µñ ‚•§ D·µí·µñ) (Œ∑ : F.unop ‚üπ F'.unop) : F' ‚üπ F :=
{ app := Œª x, (Œ∑.app $ unop x).op,
  naturality' :=
    by { intros, apply injective_hom_unop, have := Œ∑.naturality f.unop, simp at this, simp [this] } }

end category_theory.nat_trans

open category_theory
namespace category_theory.nat_iso

variables {C : Type u‚ÇÅ} [ùíû : category.{v‚ÇÅ} C] {D : Type u‚ÇÇ} [ùíü : category.{v‚ÇÇ} D]
include ùíû ùíü

protected def op {F F' : C ‚•§ D} (Œ∑ : F ‚âÖ F') : F'.op ‚âÖ F.op :=
{ hom := nat_trans.op Œ∑.hom,
  inv := nat_trans.op Œ∑.inv,
  hom_inv_id' := omitted,
  inv_hom_id' := omitted }

protected def unop {F F' : C·µí·µñ ‚•§ D·µí·µñ} (Œ∑ : F ‚âÖ F') : F'.unop ‚âÖ F.unop :=
{ hom := nat_trans.unop Œ∑.hom,
  inv := nat_trans.unop Œ∑.inv,
  hom_inv_id' := omitted,
  inv_hom_id' := omitted }

protected def op_unop (F : C ‚•§ D) : F.op.unop ‚âÖ F :=
by { cases F, refl } -- maybe not the best definition

protected def unop_op (F : C·µí·µñ ‚•§ D·µí·µñ) : F.unop.op ‚âÖ F :=
by { cases F, refl } -- maybe not the best definition

protected def op_functor_const (d : D) :
  ((category_theory.functor.const C).obj d).op ‚âÖ (category_theory.functor.const C·µí·µñ).obj (op d) :=
by refl

end category_theory.nat_iso

open category_theory
namespace category_theory.limits

variables {J : Type v} [small_category J]
variables {C : Type u} [category.{v u} C]

protected def cocone.op {F : J ‚•§ C} (s : cocone F) : cone F.op :=
‚ü®op s.X, s.Œπ.op‚ü©

protected def cone.op {F : J ‚•§ C} (s : cone F) : cocone F.op :=
‚ü®op s.X, s.œÄ.op‚ü©

protected def cocone.unop {F : J·µí·µñ ‚•§ C·µí·µñ} (s : cocone F) : cone F.unop :=
‚ü®unop s.X, s.Œπ.unop‚ü©

protected def cone.unop {F : J·µí·µñ ‚•§ C·µí·µñ} (s : cone F) : cocone F.unop :=
‚ü®unop s.X, s.œÄ.unop‚ü©

protected def cocone.op' {F : J·µí·µñ ‚•§ C·µí·µñ} (s : cocone F.unop) : cone F :=
‚ü®op s.X, s.Œπ.op' F ((category_theory.functor.const J·µí·µñ).obj $ op s.X)‚ü©

protected def cone.op' {F : J·µí·µñ ‚•§ C·µí·µñ} (s : cone F.unop) : cocone F :=
‚ü®op s.X, s.œÄ.op' ((category_theory.functor.const J·µí·µñ).obj $ op s.X) F‚ü©

protected def cocone.unop' {F : J ‚•§ C} (s : cocone F.op) : cone F :=
‚ü®unop s.X, s.Œπ.unop' F ((category_theory.functor.const J).obj $ unop s.X)‚ü©

protected def cone.unop' {F : J ‚•§ C} (s : cone F.op) : cocone F :=
‚ü®unop s.X, s.œÄ.unop' ((category_theory.functor.const J).obj $ unop s.X) F‚ü©

def has_limit_op {F : J ‚•§ C} (H : has_colimit F) : has_limit F.op :=
{ cone := H.cocone.op,
  is_limit :=
  { lift := Œª s, (H.is_colimit.desc s.unop').op,
    fac' := omitted,
    uniq' := omitted } }

def has_colimit_op {F : J ‚•§ C} (H : has_limit F) : has_colimit F.op :=
{ cocone := H.cone.op,
  is_colimit :=
  { desc := Œª s, (H.is_limit.lift s.unop').op,
    fac' := omitted,
    uniq' := omitted } }

-- def has_limit_op {F : J ‚•§ C} (H : has_colimit F) : has_limit F.op :=
-- { cone := H.cocone.op,
--   is_limit :=
--   { lift := Œª s, begin unfreezeI, cases F, exact (H.is_colimit.desc s.unop).op end,
--     fac' := omitted,
--     uniq' := omitted } }

-- def has_colimit_op {F : J ‚•§ C} (H : has_limit F) : has_colimit F.op :=
-- { cocone := H.cone.op,
--   is_colimit :=
--   { desc := Œª s, begin unfreezeI, cases F, exact (H.is_limit.lift s.unop).op end,
--     fac' := omitted,
--     uniq' := omitted } }

def has_limit_unop {F : J·µí·µñ ‚•§ C·µí·µñ} (H : has_colimit F) : has_limit F.unop :=
{ cone := H.cocone.unop,
  is_limit :=
  { lift := Œª s, (H.is_colimit.desc s.op').unop,
    fac' := omitted,
    uniq' := omitted } }

def has_colimit_unop {F : J·µí·µñ ‚•§ C·µí·µñ} (H : has_limit F) : has_colimit F.unop :=
{ cocone := H.cone.unop,
  is_colimit :=
  { desc := Œª s, (H.is_limit.lift s.op').unop,
    fac' := omitted,
    uniq' := omitted } }

def has_limit_op' {F : J·µí·µñ ‚•§ C·µí·µñ} (H : has_colimit F.unop) : has_limit F :=
{ cone := H.cocone.op',
  is_limit :=
  { lift := Œª s, (H.is_colimit.desc s.unop).op,
    fac' := omitted,
    uniq' := omitted } }

def has_colimit_op' {F : J·µí·µñ ‚•§ C·µí·µñ} (H : has_limit F.unop) : has_colimit F :=
{ cocone := H.cone.op',
  is_colimit :=
  { desc := Œª s, (H.is_limit.lift s.unop).op,
    fac' := omitted,
    uniq' := omitted } }

def has_limit_unop' {F : J ‚•§ C} (H : has_colimit F.op) : has_limit F :=
{ cone := H.cocone.unop',
  is_limit :=
  { lift := Œª s, (H.is_colimit.desc s.op).unop,
    fac' := omitted,
    uniq' := omitted } }

def has_colimit_unop' {F : J ‚•§ C} (H : has_limit F.op) : has_colimit F :=
{ cocone := H.cone.unop',
  is_colimit :=
  { desc := Œª s, (H.is_limit.lift s.op).unop,
    fac' := omitted,
    uniq' := omitted } }

def has_limits_of_shape_op (H : has_colimits_of_shape J C) : has_limits_of_shape J·µí·µñ C·µí·µñ :=
Œª F, has_limit_op' (H _)

end category_theory.limits